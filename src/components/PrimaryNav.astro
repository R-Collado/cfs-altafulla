---
import LanguageSelector from "./LanguageSelector.astro";
import {
  getLangFromUrl,
  useTranslations,
  useTranslatedPath,
} from "@/i18n/utils";

import logo from "@/images/logo.svg";

const lang = getLangFromUrl(Astro.url);
const translatePath = useTranslatedPath(lang);
const t = useTranslations(lang);
---

<header class="primary-nav">
  <div class="team-info">
    <img id="logo" src={logo.src} alt="Logo" />
    <h1 class="team-name">Club FutSal Altafulla</h1>
  </div>
  <div class="menu-container">
    <p class="menu-text" data-is-toggled="false">Menu</p>
    <div class="menu">
      <ul class="menu-items">
        <li>
          <a class="links" href={translatePath("/news", lang)} data-value="news"
            >{t("nav.news")}</a
          >
        </li>
        <li>
          <a
            class="links"
            href={translatePath("/players", lang)}
            data-value="players">{t("nav.players")}</a
          >
        </li>
        <li>
          <a
            class="links"
            href={translatePath("/contact", lang)}
            data-value="contact">{t("nav.contact")}</a
          >
        </li>
        <li>
          <a
            class="links"
            href={translatePath("/sponsors", lang)}
            data-value="sponsors">{t("nav.sponsors")}</a
          >
        </li>
      </ul>
      <LanguageSelector />
    </div>
  </div>
</header>

<style>
  .primary-nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 2.5rem;
    background-color: var(--secondary-color);
    color: var(--bg-color);
    z-index: 1000;
    position: fixed;
    top: 0;
    width: 100vw;
  }

  .team-info {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  #logo {
    width: 2.1875rem;
    aspect-ratio: 1;
  }

  .team-name {
    display: none;
    font-size: 0.875rem;

    @media (min-width: 1000px) {
      display: inline-block;
    }
  }

  .menu {
    width: 100vw;
    height: 100vh;
    background: var(--secondary-color);
    position: absolute;
    top: 0;
    left: 0;
    opacity: 0;
    pointer-events: none;
  }

  .menu.active {
    opacity: 1;
    pointer-events: all;
  }

  .menu-items {
    list-style: none;
    text-align: center;
    display: flex;
    flex-direction: column;
    justify-content: center;
    gap: 2.5rem;
    height: 100%;
  }

  .menu-items a {
    color: var(--bg-color);
    text-decoration: none;
    text-transform: uppercase;
    font-size: 2rem;
    position: relative;

    transition: color 0.25s ease-in-out;
  }

  .menu-items a:hover {
    color: var(--primary-color);
  }

  .menu-items a.active {
    color: var(--primary-color);
  }

  .menu-items a.active::before {
    content: "";
    position: absolute;
    width: 0.3125rem;
    aspect-ratio: 1;
    border-radius: 50%;
    background: var(--primary-color);
    left: 50%;
    transform: translateX(-50%);
    bottom: -20%;
  }

  .menu-text {
    cursor: pointer;
    font-size: 0.875rem;
    font-weight: 600;
    z-index: 10;
    position: relative;
    text-transform: uppercase;
    margin: 0 !important;
  }

  @media (min-width: 1000px) {
    .menu {
      opacity: 1;
      width: max-content;
      height: auto;
      flex-direction: row;
      z-index: 1;
      position: relative;
      display: flex;
      gap: 5rem;
      pointer-events: all;
    }

    .menu-items {
      flex-direction: row;
      gap: 2rem;
    }

    .menu-items a {
      font-size: 1rem;
    }

    .menu-text {
      display: none;
    }
  }
</style>

<script>
  import { getLangFromLocation, useTranslations } from "@/i18n/utils";
  import { getActualComponentRoute } from "/utils/components";

  const lang = getLangFromLocation();
  const t = useTranslations(lang);
  const actualRoute = getActualComponentRoute(window.location.pathname);

  const menuIcon = document.querySelector(".menu-text") as HTMLElement;
  const menu = document.querySelector(".menu") as HTMLElement;
  const menuItems = Array.from(
    document.querySelectorAll(".links"),
  ) as HTMLElement[];

  menuItems.forEach((menuItem) => {
    const menuItemValue = `/${menuItem.dataset.value}`;
    const isActive = menuItemValue === actualRoute;
    menuItem.classList.toggle("active", isActive);
  });

  menuIcon.onclick = () => {
    const isMenuToggled = menuIcon.dataset.isToggled === "true";

    if (isMenuToggled) {
      menuIcon.dataset.isToggled = "false";
      menu.classList.remove("active");
      menuIcon.textContent = "Menu";
    } else {
      menuIcon.dataset.isToggled = "true";
      menu.classList.add("active");
      menuIcon.textContent = t("utils.close");
    }
  };
</script>
